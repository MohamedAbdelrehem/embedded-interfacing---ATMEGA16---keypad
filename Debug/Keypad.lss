
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000284  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abc  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000684  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048b  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 12 01 	call	0x224	; 0x224 <main>
  7a:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
#define en PA6
#define rs PA7

void LCD_cmd( char command)
{
	LCD_CONT = _BV(en);
  82:	90 e4       	ldi	r25, 0x40	; 64
  84:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA = command;
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	LCD_CONT = 0x00;
  94:	1b ba       	out	0x1b, r1	; 27
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <init_LCD>:
}
void init_LCD(void){
	
	
	
	LCD_cmd(0x38);				//Initialize 8bit mode
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  aa:	8f ec       	ldi	r24, 0xCF	; 207
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <init_LCD+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <init_LCD+0x10>
  b4:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x1);				//clear
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <init_LCD+0x1c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <init_LCD+0x22>
  c6:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x6);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <init_LCD+0x2e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <init_LCD+0x34>
  d8:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x0E);				//First line start
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <LCD_write>:
	_delay_ms(1);
	
}
void LCD_write( char data){
	LCD_CONT = _BV(en) | _BV(rs);
  ee:	90 ec       	ldi	r25, 0xC0	; 192
  f0:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA = data;
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_write+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_write+0x10>
  fe:	00 00       	nop
	_delay_ms(1);
	LCD_CONT = _BV(rs);
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	8b bb       	out	0x1b, r24	; 27
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_write+0x1a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_write+0x20>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_String>:
	_delay_ms(1);
	
}
void LCD_String (char *str)
{
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_String+0x16>
	{
		LCD_write (str[i]);
 122:	0e 94 77 00 	call	0xee	; 0xee <LCD_write>
	
}
void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <LCD_String+0x10>
	{
		LCD_write (str[i]);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <Keypad>:
char *Keypad(void){
	PORTC = 0b11100000;
 13e:	80 ee       	ldi	r24, 0xE0	; 224
 140:	85 bb       	out	0x15, r24	; 21
	if ((PIND & 0b00010000) == 0) return "SW1";
 142:	84 9b       	sbis	0x10, 4	; 16
 144:	3f c0       	rjmp	.+126    	; 0x1c4 <Keypad+0x86>
	if ((PIND & 0b00100000) == 0) return "SW2";
 146:	85 9b       	sbis	0x10, 5	; 16
 148:	40 c0       	rjmp	.+128    	; 0x1ca <Keypad+0x8c>
	if ((PIND & 0b01000000) == 0) return "SW3";
 14a:	86 9b       	sbis	0x10, 6	; 16
 14c:	41 c0       	rjmp	.+130    	; 0x1d0 <Keypad+0x92>
	if ((PIND & 0b10000000) == 0) return "SW4";
 14e:	87 9b       	sbis	0x10, 7	; 16
 150:	42 c0       	rjmp	.+132    	; 0x1d6 <Keypad+0x98>
 152:	8f ec       	ldi	r24, 0xCF	; 207
 154:	97 e0       	ldi	r25, 0x07	; 7
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <Keypad+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <Keypad+0x1e>
 15c:	00 00       	nop
	_delay_ms(1);
	PORTC = 0b11010000;
 15e:	80 ed       	ldi	r24, 0xD0	; 208
 160:	85 bb       	out	0x15, r24	; 21
	if ((PIND & 0b00010000) == 0) return "SW5";
 162:	84 9b       	sbis	0x10, 4	; 16
 164:	3b c0       	rjmp	.+118    	; 0x1dc <Keypad+0x9e>
	if ((PIND & 0b00100000) == 0) return "SW6";
 166:	85 9b       	sbis	0x10, 5	; 16
 168:	3c c0       	rjmp	.+120    	; 0x1e2 <Keypad+0xa4>
	if ((PIND & 0b01000000) == 0) return "SW7";
 16a:	86 9b       	sbis	0x10, 6	; 16
 16c:	3d c0       	rjmp	.+122    	; 0x1e8 <Keypad+0xaa>
	if ((PIND & 0b10000000) == 0) return "SW8";
 16e:	87 9b       	sbis	0x10, 7	; 16
 170:	3e c0       	rjmp	.+124    	; 0x1ee <Keypad+0xb0>
 172:	8f ec       	ldi	r24, 0xCF	; 207
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <Keypad+0x38>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <Keypad+0x3e>
 17c:	00 00       	nop
	_delay_ms(1);
	PORTC = 0b10110000;
 17e:	80 eb       	ldi	r24, 0xB0	; 176
 180:	85 bb       	out	0x15, r24	; 21
	if ((PIND & 0b00010000) == 0) return "SW9";
 182:	84 9b       	sbis	0x10, 4	; 16
 184:	37 c0       	rjmp	.+110    	; 0x1f4 <Keypad+0xb6>
	if ((PIND & 0b00100000) == 0) return "SW10";
 186:	85 9b       	sbis	0x10, 5	; 16
 188:	38 c0       	rjmp	.+112    	; 0x1fa <Keypad+0xbc>
	if ((PIND & 0b01000000) == 0) return "SW11";
 18a:	86 9b       	sbis	0x10, 6	; 16
 18c:	39 c0       	rjmp	.+114    	; 0x200 <__EEPROM_REGION_LENGTH__>
	if ((PIND & 0b10000000) == 0) return "SW12";
 18e:	87 9b       	sbis	0x10, 7	; 16
 190:	3a c0       	rjmp	.+116    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Keypad+0x58>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Keypad+0x5e>
 19c:	00 00       	nop
	_delay_ms(1);
	PORTC = 0b01110000;
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	85 bb       	out	0x15, r24	; 21
	if ((PIND & 0b00010000) == 0) return "SW13";
 1a2:	84 9b       	sbis	0x10, 4	; 16
 1a4:	33 c0       	rjmp	.+102    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
	if ((PIND & 0b00100000) == 0) return "SW14";
 1a6:	85 9b       	sbis	0x10, 5	; 16
 1a8:	34 c0       	rjmp	.+104    	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
	if ((PIND & 0b01000000) == 0) return "SW15";
 1aa:	86 9b       	sbis	0x10, 6	; 16
 1ac:	35 c0       	rjmp	.+106    	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
	if ((PIND & 0b10000000) == 0) return "SW16";
 1ae:	87 9b       	sbis	0x10, 7	; 16
 1b0:	36 c0       	rjmp	.+108    	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Keypad+0x78>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Keypad+0x7e>
 1bc:	00 00       	nop
	_delay_ms(1);
	return "NULL";
 1be:	87 ea       	ldi	r24, 0xA7	; 167
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret
		LCD_write (str[i]);
	}
}
char *Keypad(void){
	PORTC = 0b11100000;
	if ((PIND & 0b00010000) == 0) return "SW1";
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret
	if ((PIND & 0b00100000) == 0) return "SW2";
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret
	if ((PIND & 0b01000000) == 0) return "SW3";
 1d0:	88 e6       	ldi	r24, 0x68	; 104
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
	if ((PIND & 0b10000000) == 0) return "SW4";
 1d6:	8c e6       	ldi	r24, 0x6C	; 108
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
	_delay_ms(1);
	PORTC = 0b11010000;
	if ((PIND & 0b00010000) == 0) return "SW5";
 1dc:	80 e7       	ldi	r24, 0x70	; 112
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 95       	ret
	if ((PIND & 0b00100000) == 0) return "SW6";
 1e2:	84 e7       	ldi	r24, 0x74	; 116
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret
	if ((PIND & 0b01000000) == 0) return "SW7";
 1e8:	88 e7       	ldi	r24, 0x78	; 120
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret
	if ((PIND & 0b10000000) == 0) return "SW8";
 1ee:	8c e7       	ldi	r24, 0x7C	; 124
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret
	_delay_ms(1);
	PORTC = 0b10110000;
	if ((PIND & 0b00010000) == 0) return "SW9";
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret
	if ((PIND & 0b00100000) == 0) return "SW10";
 1fa:	84 e8       	ldi	r24, 0x84	; 132
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret
	if ((PIND & 0b01000000) == 0) return "SW11";
 200:	89 e8       	ldi	r24, 0x89	; 137
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret
	if ((PIND & 0b10000000) == 0) return "SW12";
 206:	8e e8       	ldi	r24, 0x8E	; 142
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	08 95       	ret
	_delay_ms(1);
	PORTC = 0b01110000;
	if ((PIND & 0b00010000) == 0) return "SW13";
 20c:	83 e9       	ldi	r24, 0x93	; 147
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret
	if ((PIND & 0b00100000) == 0) return "SW14";
 212:	88 e9       	ldi	r24, 0x98	; 152
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret
	if ((PIND & 0b01000000) == 0) return "SW15";
 218:	8d e9       	ldi	r24, 0x9D	; 157
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
	if ((PIND & 0b10000000) == 0) return "SW16";
 21e:	82 ea       	ldi	r24, 0xA2	; 162
 220:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1);
	return "NULL";
}
 222:	08 95       	ret

00000224 <main>:
int main(void)
{
	DDRB = 0xFF	;							//out	data
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;							//out en,rs
 228:	8a bb       	out	0x1a, r24	; 26
	
	DDRC = 0xFF;
 22a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 22c:	11 ba       	out	0x11, r1	; 17
	
	init_LCD();								//initialize the LCD function
 22e:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	97 e2       	ldi	r25, 0x27	; 39
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x12>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x18>
 23c:	00 00       	nop
	_delay_ms(5);						//				  x
	LCD_cmd (0x0C);						//hide cursor "CSE_"
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	
		
	LCD_String("keypad: ");
 244:	8c ea       	ldi	r24, 0xAC	; 172
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 89 00 	call	0x112	; 0x112 <LCD_String>
	while(1){
	
				 if(Keypad() !="NULL"){
 24c:	0e 94 9f 00 	call	0x13e	; 0x13e <Keypad>
 250:	87 5a       	subi	r24, 0xA7	; 167
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	d9 f3       	breq	.-10     	; 0x24c <main+0x28>
						LCD_cmd(0x01);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
						LCD_String("keypad: ");
 25c:	8c ea       	ldi	r24, 0xAC	; 172
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 89 00 	call	0x112	; 0x112 <LCD_String>
						LCD_String(Keypad());
 264:	0e 94 9f 00 	call	0x13e	; 0x13e <Keypad>
 268:	0e 94 89 00 	call	0x112	; 0x112 <LCD_String>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	94 e3       	ldi	r25, 0x34	; 52
 270:	2c e0       	ldi	r18, 0x0C	; 12
 272:	81 50       	subi	r24, 0x01	; 1
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x4e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x58>
 27c:	00 00       	nop
 27e:	e6 cf       	rjmp	.-52     	; 0x24c <main+0x28>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
